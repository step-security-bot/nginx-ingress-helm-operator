name: CI

on:
  push:
    branches:
      - main
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - main

env:
  platforms: "linux/amd64,linux/arm64,linux/ppc64le,linux/s390x"

concurrency:
  group: ${{ github.ref_name }}-ci
  cancel-in-progress: true

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-22.04
    permissions:
      contents: write # for lucacome/draft-release to create a draft release
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      packages: write # for docker/build-push-action to push to GHCR
    steps:
      - name: Checkout Repository
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2

      - name: DockerHub Login
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: github.event_name != 'pull_request'

      - name: Login to GitHub Container Registry
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
        if: github.event_name != 'pull_request'

      - name: Login to Quay.io
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}
        if: github.event_name != 'pull_request'

      - name: Setup QEMU
        uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18 # v2.1.0
        with:
          platforms: arm64,ppc64le,s390x
        if: github.event_name != 'pull_request'

      - name: Docker Buildx
        uses: docker/setup-buildx-action@4b4e9c3e2d4531116a6f8ba8e71fc6e2cb6e6c8c # v2.5.0

      - name: Output Variables
        id: vars
        run: |
          echo "version=$(git describe --tags)" >> $GITHUB_OUTPUT
          echo "chart_version=$(yq '.appVersion' <helm-charts/nginx-ingress/Chart.yaml)" >> $GITHUB_OUTPUT
          echo "openshift_version=$(yq '.annotations["com.redhat.openshift.versions"]' <bundle/metadata/annotations.yaml | cut -dv -f2)" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@c4ee3adeed93b1fa6a762f209fb01608c1a22f1e # v4.4.0
        with:
          images: |
            nginx/nginx-ingress-operator
            ghcr.io/nginxinc/nginx-ingress-operator
            quay.io/nginx/nginx-ingress-operator
          tags: |
            type=edge
            type=ref,event=pr
            type=semver,pattern={{version}}
          labels: |
            org.opencontainers.image.documentation=https://docs.nginx.com/nginx-ingress-controller
            org.opencontainers.image.vendor=NGINX Inc <kubernetes@nginx.com>
            name="NGINX Ingress Operator"
            maintainer="kubernetes@nginx.com"
            vendor="NGINX Inc"
            version=${{ steps.vars.outputs.version }}
            release=1
            summary="The NGINX Ingress Operator is a Kubernetes/OpenShift component which deploys and manages one or more NGINX/NGINX Plus Ingress Controllers"
            description="The NGINX Ingress Operator is a Kubernetes/OpenShift component which deploys and manages one or more NGINX/NGINX Plus Ingress Controllers"

      - name: Build Image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671 # v4.0.0
        with:
          context: '.'
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ github.event_name != 'pull_request' && env.platforms || '' }}
          load: ${{ github.event_name == 'pull_request' }}
          push: ${{ github.event_name != 'pull_request' }}
          no-cache: ${{ github.event_name != 'pull_request' }}
          pull: true
          sbom: ${{ github.event_name != 'pull_request' }}
          provenance: false

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@e5f43133f6e8736992c9f3c1b3296e24b37e17f2 # 0.10.0
        continue-on-error: true
        with:
          image-ref: nginx/nginx-ingress-operator:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: 'true'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@f3feb00acb00f31a6f60280e6ace9ca31d91c76a # v2.3.2
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload Scan Results
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        continue-on-error: true
        with:
          name: 'trivy-results.sarif'
          path: 'trivy-results.sarif'
        if: always()

      - name: Create/Update Draft
        uses: lucacome/draft-release@b79be3ff634f771230b2b6ee9f47308c5793671a # v0.2.0
        with:
          minor-label: 'enhancement'
          major-label: 'change'
          variables: |
            nic_version=${{ steps.vars.outputs.chart_version }}
            openshift_version=${{ steps.vars.outputs.openshift_version }}
          notes-footer: |
            ## Compatibility

            - NGINX Ingress Controller {{nic_version}}
            - OpenShift {{openshift_version}} or newer.
        if: github.event_name != 'pull_request'
